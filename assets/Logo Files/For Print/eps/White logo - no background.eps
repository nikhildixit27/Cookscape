%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2375 2287
%%HiResBoundingBox: 0 0 2374.0798 2286.96
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2374.0798 2286.96 re
W
q
[0.24 0 0 -0.24 0 2286.96] cm
q
0 0 9891.666 9526.1182 re
W*
q
[158.579529 0 0 158.582886 -121.318695 -302.10187] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
13.14 39.299999 m
15.360001 39.299999 l
15.360001 54.119999 l
15.360001 57.779999 13.92 60.360001 9.300001 60.360001 c
8.460001 60.360001 l
3.960001 60.360001 2.400001 57.779999 2.400001 53.52 c
2.400001 9.18 l
2.400001 6.12 3.900001 3.54 8.460001 3.54 c
9.300001 3.54 l
13.860001 3.54 15.360001 6.12 15.360001 9.780001 c
15.360001 24.540001 l
13.14 24.540001 l
13.14 10.740001 l
13.14 8.1 12.480001 5.820001 8.88 5.820001 c
5.28 5.820001 4.68 8.040001 4.68 10.740001 c
4.68 53.16 l
4.68 55.799999 5.28 58.080002 8.88 58.080002 c
12.54 58.080002 13.14 55.800003 13.14 53.160004 c
13.14 39.300003 l
13.14 39.299999 l
h
f
Q
q
[28.343548 0 0 28.344143 2777.3743 4033.1267] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
16.152 40.390629 m
7.8512 40.390629 1.718 34.746128 1.718 25.878628 c
1.718 17.011127 7.8508 11.386628 16.152 11.386628 c
22.441101 11.386628 27.48 14.609328 29.492001 19.960827 c
24.023201 21.953026 l
22.773201 18.671726 19.784901 16.777225 16.152102 16.777225 c
11.288801 16.777225 7.558302 20.175625 7.558302 25.878826 c
7.558302 31.582027 11.288802 34.999928 16.152102 34.999928 c
19.784901 34.999928 22.773201 33.085827 24.023201 29.804626 c
29.492001 31.796825 l
27.480301 37.148426 22.4412 40.390625 16.152 40.390625 c
16.152 40.390629 l
h
f
Q
q
[15.977891 0 0 15.978228 3356.1589 3951.1082] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
75.066002 40.396 m
74.862999 39.785 74.648003 39.181 74.423004 38.582001 c
74.411003 38.542999 74.405006 38.506001 74.392006 38.466999 c
74.208008 37.989998 74.267006 37.348 74.335007 36.604 c
74.511009 34.675999 74.749008 32.034 71.327003 29.233 c
69.173004 27.466999 66.552002 27.034 63.778004 26.575001 c
62.200005 26.313002 60.569004 26.046001 58.909004 25.516001 c
57.950005 25.211 57.005005 25.286001 56.175003 25.737001 c
55.915005 25.876001 55.685001 26.055002 55.470001 26.249001 c
49.715 24.833 43.526001 25.280001 38.292999 27.562 c
31.370998 30.582001 26.134998 36.996002 24.284 44.723999 c
23.249001 49.086998 23.423 53.831001 24.785 58.443001 c
25.664 61.423 27.813999 65.648003 31.458 69.291 c
35.575001 73.407997 41.596001 76.782997 49.839001 76.782997 c
56.845001 76.780998 63.5 74.143997 68.578003 69.352997 c
76.049004 62.299 78.596001 50.934002 75.066002 40.396 c
h
54.035 33.129002 m
54.560001 34.129002 55.370998 34.990002 56.172001 35.836002 c
56.490002 36.170002 56.824001 36.522003 57.158001 36.902 c
57.822002 37.650002 58.042999 38.125 58.322002 38.722 c
58.635002 39.394001 58.990002 40.152 59.877003 41.236 c
59.982002 41.362999 60.090004 41.484001 60.203003 41.595001 c
60.730003 42.122002 61.344002 42.478001 61.976002 42.73 c
62.597 43.836998 63.068001 44.964001 63.396004 46.201 c
64.070007 48.73 64.011002 51.566002 63.232002 54.187 c
62.582001 56.362999 61.474003 58.299999 59.882004 60.063999 c
59.552002 60.397999 58.114002 61.745998 57.271004 62.278999 c
54.992004 63.717999 52.652004 64.537003 50.318005 64.714996 c
45.863007 65.056999 41.909004 63.634995 38.880005 60.605995 c
38.871006 60.595997 l
37.694008 59.419998 35.997005 57.292995 35.080006 55.159996 c
33.965004 52.565994 33.579006 49.534996 33.993004 46.630997 c
34.472004 43.470997 35.795006 40.677998 38.041004 38.097996 c
38.562004 37.499996 40.455006 35.835995 41.861004 35.023994 c
43.624004 34.005993 45.723003 33.312996 47.936005 33.013996 c
49.855 32.754002 51.959 32.818001 54.035 33.129002 c
h
62.778999 69.25 m
62.986 67.959 l
63.118999 67.140999 62.560001 66.371002 61.742001 66.239998 c
60.924 66.111 60.156002 66.667999 60.022999 67.486 c
59.647999 69.830002 l
59.571999 70.312004 59.736 70.792999 60.07 71.126999 c
60.164001 71.219002 60.272999 71.298996 60.391998 71.364998 c
58.686996 72.184998 56.887997 72.804001 55.030998 73.207001 c
54.57 72.746002 l
55.209 71.576004 l
55.605 70.847008 55.335999 69.933006 54.609001 69.543007 c
53.882 69.145004 52.970001 69.41201 52.574001 70.141006 c
51.400002 72.296997 l
51.154003 72.743996 51.164001 73.273994 51.392002 73.709 c
50.876003 73.739998 50.360001 73.780998 49.838001 73.782997 c
48.379002 73.782997 47.006001 73.655998 45.701 73.438995 c
45.567001 73.047997 l
46.295002 72.609993 l
47.004002 72.18399 47.235001 71.261993 46.811001 70.550995 c
46.382 69.837997 45.459 69.611992 44.75 70.036995 c
42.979 71.100998 l
42.458 71.415001 42.207001 72.002998 42.285 72.588997 c
40.111 71.860001 38.192001 70.847 36.52 69.660995 c
36.535 69.588997 l
37.589001 69.365997 l
38.402 69.191994 38.919003 68.396996 38.746002 67.586998 c
38.576004 66.773994 37.779003 66.258995 36.968002 66.431 c
34.959003 66.855003 l
34.542004 66.945 34.192005 67.209 33.981003 67.568001 c
32.360004 66.027 31.052002 64.350998 30.038002 62.722 c
30.666002 62.677002 l
31.492002 62.620003 32.116001 61.904003 32.061001 61.075001 c
32.003002 60.250999 31.287001 59.628002 30.458 59.684002 c
28.492001 59.821003 l
28.138 59.022003 27.861 58.270004 27.662001 57.591003 c
27.377001 56.626003 27.155001 55.644005 26.989 54.657005 c
27.296 54.733006 l
28.102999 54.922005 28.910999 54.424004 29.102999 53.620007 c
29.293999 52.813007 28.793999 52.009007 27.991999 51.811005 c
26.653999 51.495003 l
26.591999 50.057003 26.668999 48.636002 26.865 47.263004 c
27.067999 47.400005 l
27.754 47.865005 28.685999 47.685005 29.150999 46.998005 c
29.615 46.312004 29.436998 45.381004 28.75 44.916004 c
27.559 44.109005 l
29.438 37.884007 33.824001 32.783005 39.493999 30.310005 c
43.853001 28.408005 48.971001 27.966005 53.827 28.964005 c
53.768002 29.136005 53.717999 29.304005 53.673 29.464005 c
53.616001 29.667004 53.575001 29.864004 53.543999 30.056004 c
51.487 29.812004 49.431999 29.781004 47.538998 30.038004 c
44.905998 30.393003 42.492996 31.196003 40.366997 32.421005 c
38.543999 33.476006 36.443996 35.364006 35.780998 36.126007 c
33.186996 39.106007 31.588999 42.491005 31.028999 46.194008 c
30.535999 49.647007 30.997999 53.251007 32.327999 56.340008 c
33.411999 58.861008 35.322998 61.283009 36.752998 62.713009 c
36.755997 62.715008 36.759998 62.721008 36.764 62.723007 c
40.379002 66.338005 45.276001 68.10601 50.553001 67.702011 c
53.379002 67.487015 56.178001 66.516014 58.875 64.813011 c
60.146 64.01001 61.957001 62.243011 62.076 62.112011 c
64.008003 59.969009 65.328003 57.657013 66.111 55.040012 c
67.046997 51.897011 67.114998 48.48101 66.299004 45.427013 c
66.086006 44.630013 65.820007 43.866013 65.512001 43.124012 c
65.746002 43.087013 65.959 43.04401 66.131004 42.991013 c
66.924004 42.749012 67.369003 41.911011 67.125008 41.120014 c
66.883011 40.329014 66.045006 39.882015 65.252007 40.122013 c
64.844009 40.249012 63.027008 40.378014 62.203007 39.333012 c
61.553005 38.540012 61.314007 38.036011 61.045006 37.452011 c
60.725006 36.764011 60.361008 35.987011 59.410007 34.91301 c
59.053009 34.505009 58.695007 34.12801 58.353008 33.768009 c
56.740009 32.06501 56.24601 31.41601 56.56601 30.26601 c
56.886009 29.108009 57.328011 28.522011 57.605011 28.37101 c
57.660011 28.34001 57.755013 28.289009 58.001011 28.369009 c
59.87001 28.96501 61.689011 29.265009 63.292011 29.53101 c
65.765015 29.939011 67.896011 30.29101 69.431015 31.549009 c
71.617012 33.348011 71.503014 34.66201 71.351013 36.330009 c
71.263016 37.303009 71.16301 38.408009 71.591011 39.53101 c
71.591011 39.53101 71.780014 40.015011 72.226013 41.345009 c
72.636017 42.56601 72.951012 43.80201 73.179016 45.03801 c
72.47802 45.62001 l
71.480019 44.622009 l
70.89402 44.03801 69.945015 44.03801 69.361015 44.622009 c
68.775017 45.208008 68.773018 46.159008 69.361015 46.74501 c
71.322014 48.706009 l
71.869011 49.255009 72.744011 49.29401 73.340012 48.80201 c
73.602013 48.585011 l
73.694016 50.376011 73.602013 52.151009 73.332016 53.880013 c
72.484016 54.251011 l
71.777016 53.05201 l
71.361015 52.339008 70.439018 52.101009 69.724014 52.521011 c
69.011017 52.94101 68.773018 53.859013 69.193016 54.574013 c
70.574013 56.920013 l
70.640015 57.033012 70.719009 57.133015 70.806015 57.221012 c
71.234016 57.649014 71.894012 57.78701 72.468018 57.534012 c
72.472015 57.534012 l
71.923012 59.270012 71.181015 60.929012 70.257019 62.473011 c
69.378021 62.471012 l
69.065018 60.994011 l
68.89502 60.18301 68.098015 59.666012 67.288017 59.838013 c
66.47802 60.010014 65.958015 60.805012 66.13002 61.615013 c
66.693024 64.279015 l
66.756027 64.572014 66.900024 64.830017 67.099022 65.029015 c
67.363022 65.295013 67.726021 65.449013 68.119019 65.461014 c
67.615021 66.053017 67.092018 66.629013 66.521019 67.166016 c
65.56002 68.072014 64.523018 68.873016 63.445019 69.604019 c
62.778999 69.25 l
h
65.424004 31.598 m
65.028 31.598 64.645004 31.754 64.361 32.036999 c
64.085999 32.312 63.923 32.701 63.923 33.096001 c
63.923 33.493999 64.084999 33.882999 64.361 34.159 c
64.637001 34.435001 65.025002 34.598 65.424004 34.597 c
65.819 34.597 66.207001 34.435001 66.485001 34.159 c
66.765999 33.875999 66.93 33.487 66.923004 33.096001 c
66.921997 32.305 66.214996 31.598 65.424004 31.598 c
h
f
Q
q
[28.343443 0 0 28.344042 4670.063 4033.1277] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
16.152 40.390629 m
7.8512 40.390629 1.718 34.726528 1.718 25.878628 c
1.718 17.011429 7.8508 11.386628 16.152 11.386628 c
24.4333 11.386628 30.566 17.011627 30.566 25.878628 c
30.566 34.726326 24.433201 40.390629 16.152 40.390629 c
h
16.152 35.019501 m
21.015301 35.019501 24.7458 31.601501 24.7458 25.878901 c
24.7458 20.1758 21.015301 16.777302 16.152 16.777302 c
11.2887 16.777302 7.558201 20.175701 7.558201 25.878902 c
7.558201 31.601603 11.288701 35.019501 16.152 35.019501 c
h
49.932079 40 m
41.162579 28.007999 l
39.092278 28.007999 l
39.092278 40 l
33.23288 40 l
33.23288 11.777 l
39.092278 11.777 l
39.092278 22.871 l
41.084476 22.871 l
49.932175 11.777 l
57.080574 11.777 l
46.142574 25.273001 l
57.412575 40 l
49.932076 40 l
49.932079 40 l
h
68.261375 40.390629 m
62.206676 40.390629 57.480377 37.480431 56.620377 32.187531 c
62.675076 30.800831 l
63.065704 33.964931 65.389877 35.60553 68.495377 35.60553 c
70.878174 35.60553 72.772675 34.550831 72.753174 32.16803 c
72.733643 29.51173 69.608673 28.67193 66.171173 27.617229 c
62.030571 26.328129 57.596973 24.804729 57.596973 19.609428 c
57.596973 14.355528 61.893875 11.386728 67.557877 11.386728 c
72.518776 11.386728 77.518776 13.398428 78.651878 18.808628 c
72.987778 20.214928 l
72.460434 17.402428 70.56588 16.171928 67.909676 16.171928 c
65.546379 16.171928 63.534676 17.148489 63.534676 19.472729 c
63.534676 21.640728 66.308075 22.363329 69.511276 23.320429 c
73.769073 24.609529 78.808174 26.25013 78.808174 31.87513 c
78.808174 37.871231 73.788673 40.390732 68.261177 40.390732 c
68.261375 40.390629 l
h
93.993797 40.390629 m
85.692993 40.390629 79.559799 34.746128 79.559799 25.878628 c
79.559799 17.011127 85.692596 11.386628 93.993797 11.386628 c
100.282898 11.386628 105.3218 14.609328 107.333801 19.960827 c
101.864998 21.953026 l
100.614998 18.671726 97.626701 16.777225 93.993896 16.777225 c
89.1306 16.777225 85.400101 20.175625 85.400101 25.878826 c
85.400101 31.582027 89.1306 34.999928 93.993896 34.999928 c
97.626694 34.999928 100.614998 33.085827 101.864998 29.804626 c
107.333801 31.796825 l
105.322098 37.148426 100.283005 40.390625 93.993805 40.390625 c
93.993797 40.390629 l
h
128.30072 40 m
126.249924 34.179699 l
114.394928 34.179699 l
112.344131 40 l
106.34803 40 l
116.739029 11.777 l
123.907028 11.777 l
134.298035 40 l
128.301941 40 l
128.30072 40 l
h
116.113716 29.277 m
124.531715 29.277 l
120.332512 17.304001 l
116.113716 29.277 l
h
147.54921 11.777 m
153.076508 11.777 156.514008 15.878601 156.514008 20.898102 c
156.514008 26.034801 153.076508 29.882502 147.54921 29.882502 c
141.670303 29.882502 l
141.670303 39.9995 l
135.810898 39.9995 l
135.810898 11.776501 l
147.548904 11.776501 l
147.54921 11.777 l
h
146.572205 24.98 m
149.501907 24.98 150.86911 23.3589 150.86911 20.819799 c
150.86911 18.378399 149.501907 16.679199 146.572205 16.679199 c
141.669907 16.679199 l
141.669907 24.98 l
146.572205 24.98 l
h
175.0786 16.934 m
164.609604 16.934 l
164.609604 23.3403 l
173.8869 23.3403 l
173.8869 28.438 l
164.609604 28.438 l
164.609604 34.824699 l
175.0786 34.824699 l
175.0786 40.0005 l
158.711594 40.0005 l
158.711594 11.7775 l
175.0786 11.7775 l
175.0786 16.9338 l
175.0786 16.934 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
